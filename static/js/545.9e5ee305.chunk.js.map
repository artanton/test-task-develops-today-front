{"version":3,"file":"static/js/545.9e5ee305.chunk.js","mappings":"+PAEaA,EAAoB,SAAHC,GAA8B,IAAxBC,EAAOD,EAAPC,QAASC,EAAOF,EAAPE,QACnCC,EAA4BD,EAA5BC,WAAYC,EAAgBF,EAAhBE,YAEpB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHC,GAAE,gBAAAC,OAAkBJ,EAAW,aAAAI,OAAYL,GAC3CM,QAASR,EAAQS,SAEhBP,GAGP,ECXaQ,EAAsB,SAAHX,GAAsC,IAAhCC,EAAOD,EAAPC,QAASW,EAAeZ,EAAfY,gBAC7C,OACEP,EAAAA,EAAAA,KAAA,MAAAK,SACGE,EAAgBC,KAAI,SAAAC,GAEnB,OACET,EAAAA,EAAAA,KAAA,MAAAK,UACEL,EAAAA,EAAAA,KAACN,EAAiB,CAACE,QAASA,EAASC,QAASY,KADvCA,EAAcV,YAI3B,KAGN,E,mBCdaW,EAAcC,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yJ,UCqCxC,EA9BwB,SAAHlB,GAA4C,IAAtCY,EAAeZ,EAAfY,gBAAiBO,EAAInB,EAAJmB,KAAMlB,EAAOD,EAAPC,QAChD,OACEI,EAAAA,EAAAA,KAAA,OAAAK,UACEL,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,OAAO,QAAQF,KAAMA,EAAMlB,QAASA,EAAQS,UAClDL,EAAAA,EAAAA,KAACiB,EAAAA,EAAG,CAACC,GAAI,CAAEC,MAAO,QAAUC,KAAK,eAAcf,UAC7CgB,EAAAA,EAAAA,MAACJ,EAAAA,EAAG,CAACC,GAAI,CAAEI,EAAG,GAAIjB,SAAA,EAChBgB,EAAAA,EAAAA,MAAA,OAAAhB,SAAA,EACEL,EAAAA,EAAAA,KAAA,MACEuB,MAAO,CACLC,QAAS,IACTnB,SAAA,GAAAF,OAEEI,EAAgBT,WAAU,wBAEhCE,EAAAA,EAAAA,KAACU,EAAW,CAACN,QAASR,EAAQS,UAC5BL,EAAAA,EAAAA,KAACyB,EAAAA,IAAO,CAACF,MAAO,CAAEG,MAAO,eAI7B1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAO,KACR3B,EAAAA,EAAAA,KAACM,EAAmB,CAClBV,QAASA,EACTW,gBAAiBA,EAAgBqB,kBAO/C,ECnCaC,EAAalB,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6BAWvBiB,GAPSnB,EAAAA,GAAAA,IAAUoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,sGAOPF,EAAAA,GAAAA,IAAUqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,uLAMxB,SAAAS,GAAC,OAAIA,EAAEW,MAAMC,OAAOC,KAAK,KAKvBC,EAAczB,EAAAA,GAAAA,IAAU0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,kGAQxByB,EAAiB3B,EAAAA,GAAAA,IAAU4B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,oD,4DC9BzB,SAAS2B,EAAc7C,GAAkB,IAAf8C,EAAU9C,EAAV8C,WACjCC,EAAQD,EAAWjC,KAAI,SAAAmC,GAAI,OAAIA,EAAKC,IAAI,IACxCC,EAAQJ,EAAWjC,KAAI,SAAAmC,GAAI,OAAIA,EAAKG,KAAK,IAE/C,OACE9C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,CACRC,MAAO,CAAC,CAAEC,KAAMP,IAChBQ,OAAQ,CACN,CACED,KAAMJ,EACNM,MAAO,CAAEC,SAAS,KAGtBjC,MAAO,IACPkC,OAAQ,KAGd,CCJA,IAgEA,EAhEkB,WAAO,IAADC,EAAAC,EAAAC,EAAAC,EAChBC,GAAWC,EAAAA,EAAAA,MACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAE5C/D,EAAc6D,EAAaG,IAAI,eAC/BlE,EAAU+D,EAAaG,IAAI,WACjCC,GAAgDC,EAAAA,EAAAA,IAC9C,CACElE,YAAAA,EACAF,QAAAA,IAHUqE,EAAWF,EAAjBf,KAAmBkB,EAASH,EAATG,UAAWC,EAAKJ,EAALI,MAOtCC,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCvD,EAAIyD,EAAA,GAAEE,EAAOF,EAAA,GAEdG,EAAe,SAAAC,GAAO,OAAI,WAC9BF,EAAQE,EACV,CAAE,EAEF,OAAIP,GC/BsB,SAACA,GAAW,IAADQ,EAAAC,EAC/BC,EAAe,OAALV,QAAK,IAALA,GAAY,QAAPQ,EAALR,EAAOA,aAAK,IAAAQ,GAAM,QAANC,EAAZD,EAAc3B,YAAI,IAAA4B,OAAb,EAALA,EAAoBC,QACpCC,EAAAA,OAAAA,QAAeD,GAAW,sBAC5B,CD6BIE,CAAaZ,IACNpE,EAAAA,EAAAA,KAAA,KAAAK,SAAG,oDAMVgB,EAAAA,EAAAA,MAACS,EAAS,CAAAzB,SAAA,CACP8D,GAAaD,IACZ7C,EAAAA,EAAAA,MAAA4D,EAAAA,SAAA,CAAA5E,SAAA,EACEL,EAAAA,EAAAA,KAACkF,EAAAA,GAAM,CAAA7E,UACLL,EAAAA,EAAAA,KAAA,SAAAK,SAAQ6D,EAAYiB,YAAYrF,gBAElCuB,EAAAA,EAAAA,MAACe,EAAW,CAAA/B,SAAA,EACVL,EAAAA,EAAAA,KAAA,OAAAK,UACAL,EAAAA,EAAAA,KAAA,OACIoF,IAAqB,QAAlB9B,EAAEY,EAAYmB,YAAI,IAAA/B,GAAM,QAANC,EAAhBD,EAAkBL,YAAI,IAAAM,OAAN,EAAhBA,EAAwB8B,KAC7BC,IAAG,GAAAnF,OAAqB,QAArBqD,EAAKU,EAAYmB,YAAI,IAAA7B,GAAM,QAANC,EAAhBD,EAAkBP,YAAI,IAAAQ,OAAN,EAAhBA,EAAwB8B,KAAI,SACpCpE,MAAM,UAGVnB,EAAAA,EAAAA,KAAA,MAAAK,SAAK6D,EAAYiB,YAAYrF,iBAE/BE,EAAAA,EAAAA,KAACsC,EAAc,CAAAjC,UACfL,EAAAA,EAAAA,KAACwC,EAAc,CAACC,WAAayB,EAAYzB,WAAWQ,KAAKuC,sBAGzDxF,EAAAA,EAAAA,KAAC6B,EAAU,CAACN,MAAO,CAAEkE,OAAQ,EAAGjE,QAAS,QAASnB,UAChDL,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CAACC,QAAQ,YAAYvF,QAASsE,GAAa,GAAMrE,SAAC,wBAI3DL,EAAAA,EAAAA,KAAC4F,EAAe,CACdrF,gBAAiB2D,EAAYiB,YAC7BrE,KAAMA,EACNlB,QAAS8E,GAAa,SAK5B1E,EAAAA,EAAAA,KAAC6F,EAAAA,EAAW,MAGlB,C","sources":["Pages/countryPage/Component/borderCountryItem.js","Pages/countryPage/Component/borderCountriesList.js","Pages/countryPage/Component/swipeableEdgeDrawer/SwipableEdgeDrawlerStyled.js","Pages/countryPage/Component/swipeableEdgeDrawer/SwipeableEdgeDrawer.js","Pages/countryPage/CountryPageStyled.ts","Pages/countryPage/Component/lineChart/BasicLineChart.js","Pages/countryPage/countryPage.js","helpers/helper.js"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nexport const BorderCountryItem = ({ onClose, country }) => {\n  const { commonName, countryCode } = country;\n\n  return (\n    <Link\n      to={`?countryCode=${countryCode}&country=${commonName}`}\n      onClick={onClose}\n    >\n      {commonName}\n    </Link>\n  );\n};\n","import { BorderCountryItem } from './borderCountryItem';\n\nexport const BorderCountriesList = ({ onClose, borderCountries }) => {\n  return (\n    <ul>\n      {borderCountries.map(borderCountry => {\n        \n        return (\n          <li key={borderCountry.countryCode}>\n            <BorderCountryItem onClose={onClose} country={borderCountry} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\nexport const CloseButton = styled.button`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  background-color: transparent;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n`;\n","import Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport Divider from '@mui/material/Divider';\nimport { BorderCountriesList } from '../borderCountriesList';\nimport { CloseButton } from './SwipableEdgeDrawlerStyled';\n\nimport { MdClose } from 'react-icons/md';\n\nconst TemporaryDrawer = ({ borderCountries, open, onClose }) => {\n  return (\n    <div>\n      <Drawer anchor=\"right\" open={open} onClose={onClose}>\n        <Box sx={{ width: '20vw' }} role=\"presentation\">\n          <Box sx={{ p: 2 }}>\n            <div>\n              <h2\n                style={{\n                  padding: 10,\n                }}\n              >\n                {`${borderCountries.commonName} border countries`}\n              </h2>\n              <CloseButton onClick={onClose}>\n                <MdClose style={{ color: 'red' }} />\n              </CloseButton>\n            </div>\n\n            <Divider />\n            <BorderCountriesList\n              onClose={onClose}\n              borderCountries={borderCountries.borders}\n            />\n          </Box>\n        </Box>\n      </Drawer>\n    </div>\n  );\n};\nexport default TemporaryDrawer;\n","import styled from 'styled-components';\n\nexport const DrawlerBtn = styled.div`\n  padding: 100px;\n`;\n\nexport const Loader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: ${p => p.theme.colors.black};\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\nexport const CountryInfo = styled.div`\n  display: flex;\n  gap: 50px;\n  align-items: center;\n  justify-content: center;\n  \n`;\n\nexport const ChartContainer = styled.div`\n  padding: 40px;\n  max-width:800px;\n  \n`;\n","import { LineChart } from '@mui/x-charts/LineChart';\n\nexport default function BasicLineChart({ population }) {\n  const xData = population.map(item => item.year);\n  const yData = population.map(item => item.value);\n\n  return (\n    <LineChart\n      xAxis={[{ data: xData }]}\n      series={[\n        {\n          data: yData,\n          point: { visible: false },\n        },\n      ]}\n      width={800}\n      height={300}\n    />\n  );\n}\n","import { GlobalStyle } from '../../globalStyles/GlobalStyle';\n\nimport { useState } from 'react';\n\nimport TemporaryDrawer from './Component/swipeableEdgeDrawer/SwipeableEdgeDrawer';\nimport { ChartContainer, Container, CountryInfo, DrawlerBtn } from './CountryPageStyled';\n\nimport { Helmet } from 'react-helmet-async';\n\nimport Button from '@mui/material/Button';\nimport { useFetchCountryQuery } from '../../redux/sliceApi';\nimport { errorHandler } from '../../helpers/helper';\nimport { useLocation } from 'react-router-dom';\nimport BasicLineChart from './Component/lineChart/BasicLineChart';\n\nconst Countries = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const countryCode = searchParams.get('countryCode');\n  const country = searchParams.get('country');\n  const { data: countryData, isSuccess, error } = useFetchCountryQuery(\n    {\n      countryCode,\n      country,\n    }\n  );\n\n  const [open, setOpen] = useState(false);\n\n  const toggleDrawer = newOpen => () => {\n    setOpen(newOpen);\n  };\n\n  if (error) {\n    errorHandler(error);\n    return <p>Something went wrong. Please try again later.</p>;\n  }\n\n\n\n  return (\n    <Container>\n      {isSuccess && countryData &&(\n        <>\n          <Helmet>\n            <title>{countryData.countryInfo.commonName}</title>\n          </Helmet>\n          <CountryInfo>\n            <div>\n            <img\n                src={countryData.flag?.data?.flag}\n                alt={`${countryData.flag?.data?.name} flag`}\n                width=\"70\"\n              />\n            </div>\n            <h1>{countryData.countryInfo.commonName}</h1>\n          </CountryInfo>\n          <ChartContainer>\n          <BasicLineChart population ={countryData.population.data.populationCounts}/>\n          </ChartContainer>\n          \n          <DrawlerBtn style={{ zIndex: 0, padding: '40px' }}>\n            <Button variant=\"contained\" onClick={toggleDrawer(true)}>\n              Border Countries\n            </Button>\n          </DrawlerBtn>\n          <TemporaryDrawer\n            borderCountries={countryData.countryInfo}\n            open={open}\n            onClose={toggleDrawer(false)}\n          />\n        </>\n      )}\n\n      <GlobalStyle />\n    </Container>\n  );\n};\nexport default Countries;\n","import { Notify } from 'notiflix';\n\n\nexport const errorHandler = (error) => {\n  const message = error?.error?.data?.message;\n  Notify.failure(message || 'Somethng went wrong');\n};\n"],"names":["BorderCountryItem","_ref","onClose","country","commonName","countryCode","_jsx","Link","to","concat","onClick","children","BorderCountriesList","borderCountries","map","borderCountry","CloseButton","styled","_templateObject","_taggedTemplateLiteral","open","Drawer","anchor","Box","sx","width","role","_jsxs","p","style","padding","MdClose","color","Divider","borders","DrawlerBtn","Container","_templateObject2","_templateObject3","theme","colors","black","CountryInfo","_templateObject4","ChartContainer","_templateObject5","BasicLineChart","population","xData","item","year","yData","value","LineChart","xAxis","data","series","point","visible","height","_countryData$flag","_countryData$flag$dat","_countryData$flag2","_countryData$flag2$da","location","useLocation","searchParams","URLSearchParams","search","get","_useFetchCountryQuery","useFetchCountryQuery","countryData","isSuccess","error","_useState","useState","_useState2","_slicedToArray","setOpen","toggleDrawer","newOpen","_error$error","_error$error$data","message","Notify","errorHandler","_Fragment","Helmet","countryInfo","src","flag","alt","name","populationCounts","zIndex","Button","variant","TemporaryDrawer","GlobalStyle"],"sourceRoot":""}